diff --git a/cjs/eslint-plugin-react-hooks.development.js b/cjs/eslint-plugin-react-hooks.development.js
index 0d67652c25374269f9d52cb51962056555a49f90..057544bca33c334b79900e4a29af440508b882c6 100644
--- a/cjs/eslint-plugin-react-hooks.development.js
+++ b/cjs/eslint-plugin-react-hooks.development.js
@@ -212,7 +212,7 @@ const rule$1 = {
                 if (name === 'useRef' && id.type === 'Identifier') {
                     return true;
                 }
-                else if (isUseEffectEventIdentifier$1() &&
+                else if (isUseEffectEventIdentifier$1(callee) &&
                     id.type === 'Identifier') {
                     for (const ref of resolved.references) {
                         if (ref !== id) {
@@ -1440,7 +1440,7 @@ function isAncestorNodeOf(a, b) {
         a.range[1] >= b.range[1]);
 }
 function isUseEffectEventIdentifier$1(node) {
-    return false;
+    return node.type === 'Identifier' && node.name === 'useEffectEvent';
 }
 function getUnknownDependenciesMessage(reactiveHookName) {
     return (`React Hook ${reactiveHookName} received a function whose dependencies ` +
@@ -55395,7 +55395,7 @@ function isUseEffectIdentifier(node) {
     return node.type === 'Identifier' && node.name === 'useEffect';
 }
 function isUseEffectEventIdentifier(node) {
-    return false;
+    return node.type === 'Identifier' && node.name === 'useEffectEvent';
 }
 function isUseIdentifier(node) {
     return isReactFunction(node, 'use');
@@ -55421,7 +55421,7 @@ const rule = {
                     parent.init &&
                     parent.init.type === 'CallExpression' &&
                     parent.init.callee &&
-                    isUseEffectEventIdentifier()) {
+                    isUseEffectEventIdentifier(parent.init.callee)) {
                     if (reference.resolved === null) {
                         throw new Error('Unexpected null reference.resolved');
                     }
@@ -55691,7 +55691,7 @@ const rule = {
                 }
                 const nodeWithoutNamespace = getNodeWithoutReactNamespace(node.callee);
                 if ((isUseEffectIdentifier(nodeWithoutNamespace) ||
-                    isUseEffectEventIdentifier()) &&
+                    isUseEffectEventIdentifier(nodeWithoutNamespace)) &&
                     node.arguments.length > 0) {
                     lastEffect = node;
                 }
diff --git a/cjs/eslint-plugin-react-hooks.production.js b/cjs/eslint-plugin-react-hooks.production.js
index a65763e7ae939af900a50fec6ae1a0a7a4f28f15..cfeb0c4a599415e4d46a9fe102d1b81508b5946f 100644
--- a/cjs/eslint-plugin-react-hooks.production.js
+++ b/cjs/eslint-plugin-react-hooks.production.js
@@ -208,7 +208,7 @@ const rule$1 = {
                 if (name === 'useRef' && id.type === 'Identifier') {
                     return true;
                 }
-                else if (isUseEffectEventIdentifier$1() &&
+                else if (isUseEffectEventIdentifier$1(callee) &&
                     id.type === 'Identifier') {
                     for (const ref of resolved.references) {
                         if (ref !== id) {
@@ -1436,7 +1436,7 @@ function isAncestorNodeOf(a, b) {
         a.range[1] >= b.range[1]);
 }
 function isUseEffectEventIdentifier$1(node) {
-    return false;
+    return node.type === 'Identifier' && node.name === 'useEffectEvent';
 }
 function getUnknownDependenciesMessage(reactiveHookName) {
     return (`React Hook ${reactiveHookName} received a function whose dependencies ` +
@@ -55222,7 +55222,7 @@ function isUseEffectIdentifier(node) {
     return node.type === 'Identifier' && node.name === 'useEffect';
 }
 function isUseEffectEventIdentifier(node) {
-    return false;
+    return node.type === 'Identifier' && node.name === 'useEffectEvent';
 }
 function isUseIdentifier(node) {
     return isReactFunction(node, 'use');
@@ -55248,7 +55248,7 @@ const rule = {
                     parent.init &&
                     parent.init.type === 'CallExpression' &&
                     parent.init.callee &&
-                    isUseEffectEventIdentifier()) {
+                    isUseEffectEventIdentifier(parent.init.callee)) {
                     if (reference.resolved === null) {
                         throw new Error('Unexpected null reference.resolved');
                     }
@@ -55518,7 +55518,7 @@ const rule = {
                 }
                 const nodeWithoutNamespace = getNodeWithoutReactNamespace(node.callee);
                 if ((isUseEffectIdentifier(nodeWithoutNamespace) ||
-                    isUseEffectEventIdentifier()) &&
+                    isUseEffectEventIdentifier(nodeWithoutNamespace)) &&
                     node.arguments.length > 0) {
                     lastEffect = node;
                 }
